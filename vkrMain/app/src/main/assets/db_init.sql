PRAGMA foreign_keys = ON;

CREATE TABLE "Category" (
	"id" 			INTEGER PRIMARY KEY,
	"name"			TEXT NOT NULL UNIQUE COLLATE NOCASE,
	"max_count_repeat"		INTEGER NOT NULL,
	"system" 			INTEGER NOT NULL
);

CREATE TABLE "Block" (
	"id" 				INTEGER PRIMARY KEY,
	"question"				TEXT NOT NULL UNIQUE COLLATE NOCASE,
	"answer"				TEXT NOT NULL,
	"count_repeat"			INTEGER,
	"date_repeat"			INTEGER NOT NULL,
	"Category_id"			INTEGER NOT NULL,
	FOREIGN KEY("Category_id") REFERENCES "Category"("id")
	ON UPDATE CASCADE ON DELETE CASCADE
);

INSERT INTO "Category" ("name", "max_count_repeat", "system")
VALUES
	("Java Script", 7, 1);

INSERT INTO "Block" ("question", "answer", "count_repeat", "date_repeat", "Category_id")
VALUES
	("Что такое замыкание (Closures)?", "Замыкание — это способность функции во время создания запоминать ссылки на переменные и параметры, находящиеся в текущей области видимости, в области видимости родительской функции, в области видимости родителя родительской функции и так до глобальной области видимости с помощью цепочки областей видимости. Обычно область видимости определяется при создании функции.",
	"2", "1683188647", "1"),
	("Как проверить, является ли значение ложным?", "Следует использовать функцию Boolean или оператор «!!» (двойное отрицание).",
	"5", "1683188647", "1"),
    ("Для чего используется директива «use strict»?", "«use strict» — это директива ES5, которая заставляет весь наш код или код отдельной функции выполняться в строгом режиме. Строгий режим вводит некоторые ограничения по написанию кода, тем самым позволяя избегать ошибок на ранних этапах.",
	"3", "1683188647", "1"),
    ("Что такое прототип объекта?", "В двух словах, прототип — это план (схема или проект) объекта. Он используется как запасной вариант для свойств и методов, существующих в данном объекте. Это также один из способов обмена свойствами и функциональностью между объектами. Это основная концепция прототипного наследования в JS.",
	"4", "1683188647", "1"),
    ("В чем разница между методами call и apply?", "Отличие между call и apply состоит в том, как мы передаем аргументы в вызываемой функции. В apply аргументы передаются в виде массива, в call — через запятую.",
	"1", "1683188647", "1");
